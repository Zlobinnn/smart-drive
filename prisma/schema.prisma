generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String    @unique
    password String
    role     UserRole  @default(USER)
    verified DateTime?

    provider   String?
    providerId String?

    cart    Cart?
    orders  Order[]
    vehicle Vehicle?

    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    vehicles Vehicle[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Vehicle {
    id Int @id @default(autoincrement())

    name        String
    imageUrl    String
    price       Int
    description String

    CartItem CartItem[]
    Cart     Cart[]

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    brand   Brand @relation(fields: [brandId], references: [id])
    brandId Int

    year         Int
    mileage      Int
    transmission String
    fuelType     String
    engineSize   Float
    horsepower   Int
    seats        Int
    doors        Int
    driveType    String
    color        String
    vin          String?

    isAvailable Boolean @default(true)
    status      String  @default("Parked")

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    order   Order[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Service {
    id Int @id @default(autoincrement())

    name  String
    price Int

    cartItem CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Brand {
    id Int @id @default(autoincrement())

    name String

    vehicles Vehicle[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    //items CartItem[]
    items Vehicle[]

    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    // cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
    vehicleId Int

    quantity Int

    services Service[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int

    token String

    vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
    vehicleId Int

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    email    String
    phone    String
    address  String
    comment  String

    startDate DateTime
    endDate   DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEDED
    CANCELED
}

enum UserRole {
    USER
    ADMIN
}
